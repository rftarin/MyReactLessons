{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/rftarin/Desenvolvimento/counter-app/src/components/counter.jsx\";\nimport React, { Component } from \"react\";\n\nclass Counter extends Component {\n  // state = {\n  //    value: this.props.counter.value\n  //};\n  //\n  // This is the common method used of bind events!!!\n  //\n  //constructor() {\n  //    super();\n  //    this.handleIncrement = this.handleIncrement.bind(this);\n  //}\n  renderTags() {\n    if (this.state.tags.length === 0) return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"There are no tags!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 46\n    }, this);\n    return /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: this.state.tags.map(tag => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: tag\n      }, tag, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this);\n  } //\n  // This is the other way to bind events, like an error function!!!\n  // This is to make code more clean!\n  //\n  //handleIncrement = (product) => {\n  //    this.setState({value: this.state.value + 1});\n  //}\n\n\n  render() {\n    console.log(\"props\", this.props);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: this.getBadgeClasses(),\n        children: this.props.counter.value\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.props.onIncrement(this.props.counter) // () => this.handleIncrement({ id: 1 })\n        ,\n        className: \"btn btn-secondary btn-sm\",\n        children: \"Increment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.props.onDelete(this.props.counter.id),\n        className: \"btn btn-danger btn-sm m-2\",\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this);\n  }\n\n  getBadgeClasses() {\n    let classes = \"badge m-2 badge-\";\n    classes += this.props.counter.value === 0 ? \"warning\" : \"primary\";\n    return classes;\n  } // Not used funcion, it just format with zero string in case of '0' number.\n\n\n  formatCount() {\n    const {\n      value: count\n    } = this.props.counter;\n    return count === 0 ? \"Zero\" : count;\n  }\n\n}\n\nexport default Counter;","map":{"version":3,"sources":["/home/rftarin/Desenvolvimento/counter-app/src/components/counter.jsx"],"names":["React","Component","Counter","renderTags","state","tags","length","map","tag","render","console","log","props","getBadgeClasses","counter","value","onIncrement","onDelete","id","classes","formatCount","count"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAEA,MAAMC,OAAN,SAAsBD,SAAtB,CAAgC;AAC9B;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEAE,EAAAA,UAAU,GAAG;AACX,QAAI,KAAKC,KAAL,CAAWC,IAAX,CAAgBC,MAAhB,KAA2B,CAA/B,EAAkC,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AAElC,wBACE;AAAA,gBACG,KAAKF,KAAL,CAAWC,IAAX,CAAgBE,GAAhB,CAAqBC,GAAD,iBACnB;AAAA,kBAAeA;AAAf,SAASA,GAAT;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YADF;AAOD,GAxB6B,CA0B9B;AACA;AACA;AACA;AAEA;AACA;AACA;;;AAEAC,EAAAA,MAAM,GAAG;AACPC,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqB,KAAKC,KAA1B;AACA,wBACE;AAAA,8BACE;AAAM,QAAA,SAAS,EAAE,KAAKC,eAAL,EAAjB;AAAA,kBACG,KAAKD,KAAL,CAAWE,OAAX,CAAmBC;AADtB;AAAA;AAAA;AAAA;AAAA,cADF,eAIE;AACE,QAAA,OAAO,EAAE,MAAM,KAAKH,KAAL,CAAWI,WAAX,CAAuB,KAAKJ,KAAL,CAAWE,OAAlC,CADjB,CAC6D;AAD7D;AAEE,QAAA,SAAS,EAAC,0BAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF,eAUE;AACE,QAAA,OAAO,EAAE,MAAM,KAAKF,KAAL,CAAWK,QAAX,CAAoB,KAAKL,KAAL,CAAWE,OAAX,CAAmBI,EAAvC,CADjB;AAEE,QAAA,SAAS,EAAC,2BAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAVF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAmBD;;AAEDL,EAAAA,eAAe,GAAG;AAChB,QAAIM,OAAO,GAAG,kBAAd;AACAA,IAAAA,OAAO,IAAI,KAAKP,KAAL,CAAWE,OAAX,CAAmBC,KAAnB,KAA6B,CAA7B,GAAiC,SAAjC,GAA6C,SAAxD;AACA,WAAOI,OAAP;AACD,GA9D6B,CAgE9B;;;AACAC,EAAAA,WAAW,GAAG;AACZ,UAAM;AAAEL,MAAAA,KAAK,EAAEM;AAAT,QAAmB,KAAKT,KAAL,CAAWE,OAApC;AACA,WAAOO,KAAK,KAAK,CAAV,GAAc,MAAd,GAAuBA,KAA9B;AACD;;AApE6B;;AAuEhC,eAAenB,OAAf","sourcesContent":["import React, { Component } from \"react\";\n\nclass Counter extends Component {\n  // state = {\n  //    value: this.props.counter.value\n  //};\n\n  //\n  // This is the common method used of bind events!!!\n  //\n\n  //constructor() {\n  //    super();\n  //    this.handleIncrement = this.handleIncrement.bind(this);\n  //}\n\n  renderTags() {\n    if (this.state.tags.length === 0) return <p>There are no tags!</p>;\n\n    return (\n      <ul>\n        {this.state.tags.map((tag) => (\n          <li key={tag}>{tag}</li>\n        ))}\n      </ul>\n    );\n  }\n\n  //\n  // This is the other way to bind events, like an error function!!!\n  // This is to make code more clean!\n  //\n\n  //handleIncrement = (product) => {\n  //    this.setState({value: this.state.value + 1});\n  //}\n\n  render() {\n    console.log(\"props\", this.props);\n    return (\n      <div>\n        <span className={this.getBadgeClasses()}>\n          {this.props.counter.value}\n        </span>\n        <button\n          onClick={() => this.props.onIncrement(this.props.counter)} // () => this.handleIncrement({ id: 1 })\n          className=\"btn btn-secondary btn-sm\"\n        >\n          Increment\n        </button>\n        <button\n          onClick={() => this.props.onDelete(this.props.counter.id)}\n          className=\"btn btn-danger btn-sm m-2\"\n        >\n          Delete\n        </button>\n      </div>\n    );\n  }\n\n  getBadgeClasses() {\n    let classes = \"badge m-2 badge-\";\n    classes += this.props.counter.value === 0 ? \"warning\" : \"primary\";\n    return classes;\n  }\n\n  // Not used funcion, it just format with zero string in case of '0' number.\n  formatCount() {\n    const { value: count } = this.props.counter;\n    return count === 0 ? \"Zero\" : count;\n  }\n}\n\nexport default Counter;\n"]},"metadata":{},"sourceType":"module"}