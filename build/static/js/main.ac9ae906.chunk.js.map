{"version":3,"sources":["components/navbar.jsx","components/counter.jsx","components/counters.jsx","resources/iron_texture1049.jpg","App.js","reportWebVitals.js","index.js"],"names":["NavBar","totalCounters","className","href","Counter","this","state","tags","length","map","tag","console","log","props","getBadgeClasses","counter","value","onClick","onIncrement","onDelete","id","classes","count","Component","Counters","onReset","counters","style","textAlign","App","handlerIncrement","index","indexOf","setState","handlerDelete","counterId","filter","c","handlerReset","Fragment","src","Fundo","alt","width","height","window","innerHeight","position","left","top","right","margin","zIndex","backgroundColor","bottom","border","borderRadius","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ac9ae906.chunk.js","sourcesContent":["import React from \"react\";\n\n//\n// Stateless Functional Component\n//\n\nconst NavBar = ({ totalCounters }) => {\n  return (\n    <nav className=\"navbar navbar-light bg-light\">\n      <a className=\"navbar-brand\" href=\"#\">\n        Navbar{\" \"}\n        <span className=\"badge badge-pill badge-secondary\">\n          {totalCounters}\n        </span>\n      </a>\n    </nav>\n  );\n};\n\nexport default NavBar;\n","import React, { Component } from \"react\";\n\nclass Counter extends Component {\n  // state = {\n  //    value: this.props.counter.value\n  //};\n\n  //\n  // This is the common method used of bind events!!!\n  //\n\n  //constructor() {\n  //    super();\n  //    this.handleIncrement = this.handleIncrement.bind(this);\n  //}\n\n  renderTags() {\n    if (this.state.tags.length === 0) return <p>There are no tags!</p>;\n\n    return (\n      <ul>\n        {this.state.tags.map((tag) => (\n          <li key={tag}>{tag}</li>\n        ))}\n      </ul>\n    );\n  }\n\n  //\n  // This is the other way to bind events, like an error function!!!\n  // This is to make code more clean!\n  //\n\n  //handleIncrement = (product) => {\n  //    this.setState({value: this.state.value + 1});\n  //}\n\n  render() {\n    console.log(\"props\", this.props);\n    return (\n      <div>\n        <span className={this.getBadgeClasses()}>\n          {this.props.counter.value}\n        </span>\n        <button\n          onClick={() => this.props.onIncrement(this.props.counter)} // () => this.handleIncrement({ id: 1 })\n          className=\"btn btn-secondary btn-sm\"\n        >\n          Increment\n        </button>\n        <button\n          onClick={() => this.props.onDelete(this.props.counter.id)}\n          className=\"btn btn-danger btn-sm m-2\"\n        >\n          Delete\n        </button>\n      </div>\n    );\n  }\n\n  getBadgeClasses() {\n    let classes = \"badge m-2 badge-\";\n    classes += this.props.counter.value === 0 ? \"warning\" : \"primary\";\n    return classes;\n  }\n\n  // Not used funcion, it just format with zero string in case of '0' number.\n  formatCount() {\n    const { value: count } = this.props.counter;\n    return count === 0 ? \"Zero\" : count;\n  }\n}\n\nexport default Counter;\n","import React, { Component } from \"react\";\nimport Counter from \"./counter\";\n\nclass Counters extends Component {\n  render() {\n    const { onReset, counters, onDelete, onIncrement } = this.props;\n    return (\n      <div style={{ textAlign: \"center\" }}>\n        <button onClick={onReset} className=\"btn btn-primary btn-sm m-2\">\n          Reset\n        </button>\n        {counters.map((counter) => (\n          <Counter\n            key={counter.id}\n            onDelete={onDelete}\n            onIncrement={onIncrement}\n            counter={counter} // This is the better way to pass parameters, it's a clean way :-)\n            // value={ counter.value }\n            // id={ counter.id }\n          />\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default Counters;\n","export default __webpack_public_path__ + \"static/media/iron_texture1049.4387b832.jpg\";","import React, { Component } from \"react\";\nimport NavBar from \"./components/navbar\";\nimport Counters from \"./components/counters\";\nimport \"./App.css\";\nimport Fundo from \"./resources/iron_texture1049.jpg\";\n\nclass App extends Component {\n  state = {\n    counters: [\n      { id: 1, value: 0 },\n      { id: 2, value: 0 },\n      { id: 3, value: 0 },\n      { id: 4, value: 0 },\n    ],\n  };\n\n  handlerIncrement = (counter) => {\n    const counters = [...this.state.counters]; // It makes a clone of counters inside state\n    const index = counters.indexOf(counter); // Lets get index of button\n    counters[index] = { ...counter }; // It makes a clone only of a button from array\n    counters[index].value++; // Increment it.\n    this.setState({ counters }); // Update state of it.\n  };\n\n  handlerDelete = (counterId) => {\n    //\n    // Here we make a filter to exclude a deleted button\n    //\n    const counters = this.state.counters.filter((c) => c.id !== counterId);\n    this.setState({ counters }); // Same of -> this.setState({ counters: counters })\n  };\n\n  handlerReset = () => {\n    const counters = this.state.counters.map((c) => {\n      c.value = 0;\n      return c;\n    });\n\n    this.setState({ counters });\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <img\n          src={Fundo}\n          alt=\"\"\n          style={{ width: \"100%\", height: window.innerHeight }}\n        ></img>\n        <div\n          style={{\n            position: \"absolute\",\n            width: \"100%\",\n            height: \"50px\",\n            left: 0,\n            top: 0,\n            right: 0,\n            margin: \"auto\",\n            zIndex: \"9999\",\n            backgroundColor: \"#ff0000\",\n          }}\n        >\n          {\" \"}\n          <NavBar\n            totalCounters={\n              this.state.counters.filter((c) => c.value > 0).length\n            }\n          />\n        </div>\n\n        <div\n          style={{\n            position: \"absolute\",\n            width: \"250px\",\n            height: \"240px\",\n            left: 0,\n            top: 0,\n            right: 0,\n            bottom: 0,\n            margin: \"auto\",\n            zIndex: \"9999\",\n            backgroundColor: \"rgba(0, 0, 0, 0.9)\",\n            border: \"1px solid red\",\n            borderRadius: \"25px\",\n          }}\n        >\n          <main className=\"container\">\n            <Counters\n              counters={this.state.counters}\n              onReset={this.handlerReset}\n              onIncrement={this.handlerIncrement}\n              onDelete={this.handlerDelete}\n            />\n          </main>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}